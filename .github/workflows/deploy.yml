name: CD Workflow

# helpful reference: https://philo.dev/how-to-use-github-actions-build-matrix-to-deploy-artifacts-to-multiple-servers/

on:
  push:
    branches:
      - deploy-actions
#on:
#  workflow_dispatch:
#    branches:
#      - main
#    inputs:
#      logLevel:
#        description: 'Log level'     
#        required: true
#        default: 'warning'
#      tags:
#        description: 'Test scenario tags'  

jobs:

#  app-tests:
#    name: Tests
#    runs-on: ubuntu-18.04
#    services:
#      mysql:
#        image: mysql:8.0
#        env:
#          MYSQL_ALLOW_EMPTY_PASSWORD: yes
#          MYSQL_DATABASE: test_db
#        ports:
#          - 3306
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: Copy .env
#        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
#
#      - name: Install Composer Dependencies
#        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
#
#      #- name: Install NPM Dependencies
#      #  run: npm install
#
#      - name: Generate Key
#        run: php artisan key:generate
#
#      - name: Execute tests (Unit and Feature tests) via PHPUnit
#        env:
#          DB_PORT: ${{ job.services.mysql.ports[3306] }}
#        run: vendor/bin/phpunit
##
#      #- name: Execute tests (Unit and Feature tests) via JEST
#      #run: node_modules/.bin/jest
#
#  build-production-assets:
#    name: Build JavaScript/CSS for PRODUCTION Server
#    runs-on: ubuntu-18.04
#    needs: app-tests
#    if: github.ref == 'refs/heads/deploy-actions'
#
#    steps:
#      - uses: actions/checkout@v1
#      - name: NPM Build
#        run: |
#          npm install
#          npm run prod
#
#      - name: Create deployment artifact
#        run: tar -czf app.tar.gz public
#
#      - name: Put built assets in Artifacts
#        uses: actions/upload-artifact@v1
#        with:
#          name: app-assets
#          path: app.tar.gz

  deploy-production:
    name: Deploy Project to PRODUCTION Server
    runs-on: ubuntu-latest
#    needs: [build-production-assets, app-tests]
    if: github.ref == 'refs/heads/deploy-actions'

    steps:
#      - name: Fetch built assets from Artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: app-assets

      - name: create dummy tarball again
        run: |
          mkdir public
          echo "foo" > public/foo.txt
          echo "bar" > public/bar.txt
          tar -czf app.tar.gz public
          ls -l

      - name: Upload build assets
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.DEPLOY_SSH_PASSPHRASE }}
          overwrite: 1
          source: "app.tar.gz"
          target: "sites/deployment"

      - name: Deploy code
        uses: appleboy/ssh-action@master
        env:
          BASEDIR: ${{ secrets.DEPLOY_BASEDIR }}
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.DEPLOY_SSH_PASSPHRASE }}
          envs: BASEDIR
          script: |
            ls -la ${BASEDIR}/sites/deployment/
            rm -fr ${BASEDIR}/sites/deployment/public
            tar -xzf ${BASEDIR}/sites/deployment/app.tar.gz -C ${BASEDIR}/sites/deployment
            ls -la ${BASEDIR}/sites/deployment/
            #cd sites/deployment && rm -fr public/
            #cd sites/deployment && tar -xzf app.tar.gz
            #git pull
            #php-8.0 ~/bin/composer-8.0 install


