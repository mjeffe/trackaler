#
# CI/CD Design strategy
#
# - Use GitHub Flow - that is:
#   - main is the only long lived branch
#   - work on feature branches
#   - merge to main when production ready
# - A push to main triggers CI/CD workflow
# - The default deploy is to staging
# - A manual workflow_dispatch is needed to deploy to production
#
# My deployment strategy is far from ideal, but works for now.  The "right" way
# to deploy would be to bundle *everything* rather than just the compiled
# assets, or use something like the Deployer php package.
#
# Issues, Questions...
# - I wanted to have test/build/deploy as seperate workflows to keep things DRY
#   and reusable. Each successfull workflow would invoke the next using
#   repository_dispatch. But unfortunately GitHub Actions is still too immature.
#   I could *mostly* make it work, but it involved a number of hacks that were
#   not pretty. So, here I just have it all as a single workflow.
#
name: CI/CD

on:
  push:
  # workflow_dispatch is primarily used to deploy to production
  workflow_dispatch:
#    branches: [ main ]
    inputs:
      deploy_to:
        description: 'Deploy to which system (stg|prod)'
        required: true
        default: stg
env:
  # if manually invoked using workflow_dispatch, this will be set, otherwise it is empty
  DEPLOY_TO: ${{ github.event.inputs.deploy_to }}

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test_db
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: Generate Key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Build assets
        run: |
          npm install
          npm run prod

      - name: Run PHPUnit tests (Unit and Feature tests)
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: vendor/bin/phpunit

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v2

      - name: NPM Build
        run: |
          npm install
          npm run prod

      - name: Create deployment tarball
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz public

      - name: Upload tarball to GH Artifacts store
        uses: actions/upload-artifact@v1
        with:
          name: app-assets
          path: ${{ github.sha }}.tar.gz

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test,build]
    #if: ${{ github.event.inputs.deploy_to == 'prod' }}

    steps:
      - name: Set deployment env
        env:
          STG_BASEDIR: ${{ secrets.DEPLOY_BASEDIR }}
          PROD_BASEDIR: ${{ secrets.PROD_BASEDIR }}
        run: |
            echo "DEPLOY_BASEDIR=$(if [ "$DEPLOY_TO" = 'prod' ]; then echo $PROD_BASEDIR; else echo $STG_BASEDIR; fi)" >> $GITHUB_ENV

      - name: Echo env
        run: |
          echo DEPLOY_TO             = $DEPLOY_TO
          echo DEPLOY_BASEDIR        = $DEPLOY_BASEDIR
          echo env.DEPLOY_BASEDIR    = ${{ env.DEPLOY_BASEDIR }}

      - name: Download built assets from GH Artifacts store
        uses: actions/download-artifact@v2
        with:
          name: app-assets

      - name: Upload built assets to deployment server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.DEPLOY_SSH_PASSPHRASE }}
          overwrite: 1
          source: ${{ github.sha }}.tar.gz
          target: ${{ secrets.DEPLOY_WORKDIR }}

      - name: Deploy code
        uses: appleboy/ssh-action@master
        env:
          # this env is for the remote server's "script" command (NOT for a
          # local "run" command) so we need to pass in some things
          DEPLOY_TO: ${{ env.DEPLOY_TO }}
          TARBALL: ${{ github.sha }}.tar.gz
          WORKDIR: ${{ secrets.DEPLOY_WORKDIR }}
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.DEPLOY_SSH_PASSPHRASE }}
          script_stop: true
          envs: WORKDIR,TARBALL,DEPLOY_TO
          # TODO: extract to deploy.sh script
          script: |
            # default to staging
            echo "${DEPLOY_TO:=stg}" > /dev/null 2>&1
            #
            # create env file (may use it later)
            #
            cd ${WORKDIR} || exit 1
            echo "# Deploying to $DEPLOY_TO" > deploy.env
            echo "TARBALL               = $TARBALL" >> deploy.env
            echo "WORKDIR               = $WORKDIR" >> deploy.env
            echo "DEPLOY_TO             = $DEPLOY_TO" >> deploy.env
            echo "DEPLOY_BASEDIR        = ${{ env.DEPLOY_BASEDIR }}" >> deploy.env
            #
            # pull and run post deploy script
            #
            cd ${{ env.DEPLOY_BASEDIR }} || exit 1
            git pull
            git checkout `basename ${{ github.ref }}`
            git pull
            ./deploy.sh $DEPLOY_TO
            #
            # install tarballed artifacts
            #
            cd $WORKDIR || exit 1
            tar --recursive-unlink -xzf $TARBALL
            rm $TARBALL
            # note, this doesn't remove anything from public/ just overwrites
            cp -r public ${{ env.DEPLOY_BASEDIR }}/

